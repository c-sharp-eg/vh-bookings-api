# Set variables once
variables:
  solutionType: DotNetCore # angularDotNetCore, dotNetCore, angular
  apiDirectory: 'BookingsAPI/Bookings.API'
  sonarCloudExtraProperties: |
    sonar.cs.opencover.reportsPaths=$(Common.TestResultsDirectory)\Coverage\coverage.opencover.xml
    sonar.coverage.exclusions=Bookings.API/Program.cs,Bookings.API/Startup.cs,Bookings.API/Extensions/**,Bookings.API/Swagger/**,Bookings.API/ConfigureServicesExtensions.cs,Testing.Common/**,Bookings.Common/**,**/Bookings.DAL/Mappings/**,Bookings.DAL/SeedData/**,Bookings.DAL/BookingsDbContext.cs,Bookings.DAL/**/DesignTimeHearingsContextFactory.cs,**/Bookings.DAL/Migrations/**,Bookings.Domain/Ddd/**,Bookings.DAL/Commands/Core/**,Bookings.DAL/Queries/Core/**,**/Testing.Common/**
    sonar.cpd.exclusions="**/Program.cs,**/Startup.cs,Bookings.DAL/Mappings/**,Migrations/**,SeedData/**,DesignTimeHearingsContextFactory.cs,Ddd/**,Testing.Common/**,Bookings.API/ConfigureServicesExtensions.cs,Bookings.API/Extensions/**,Bookings.API/Swagger/**,Bookings.Common/**"
  coverletCoverageExclusions: '[*]Bookings.Common.*,[*]Testing.Common.*,[Bookings.DAL]Bookings.DAL.BookingsDbContext,[*]Bookings.DAL.Mappings,[*]Bookings.DAL.Migrations,[*]Bookings.DAL.SeedData.*,[*]Bookings.DAL.Exceptions.*,[*]Bookings.DAL.Mappings.*,[*]Bookings.DAL.Migrations.*,[*]Bookings.DAL.Commands.Core.*,[*]Bookings.DAL.Queries.Core.*,[*]Bookings.Domain.Ddd.*,[Bookings.DAL]Bookings.DAL.DesignTimeHearingsContextFactory,[Bookings.API]Bookings.API.ConfigureServicesExtensions,[*]Bookings.API.Extensions.*,[*]Bookings.API.Swagger.*,[Bookings.API]Bookings.API.Program,[Bookings.API]Bookings.API.Startup'
  integrationTestsAppSettingsTransform: '
    "AzureAd/TenantId":"$(tenantid)",
    "AzureAd/VhBookingsApiResourceId":"$(vh-bookings-api-identifieruris)",
    "Testing/TestClientId":"$(vh-admin-web-appid)",
    "Testing/TestClientSecret":"$(vh-admin-web-key)"
    '
  dalWorkingDirectory: 'BookingsAPI/Bookings.DAL'
  keyVaultName: vhcoreinfrahtdev # Used to get secrets for integration tests
  secretsFilter: 'vh-admin-web-appid,vh-admin-web-key,tenantid,vh-bookings-api-identifieruris' # filters out secrets returned from key vault
  imageName: 'vhinfrastructure.azurecr.io/vh-docker:$(Build.BuildId)'
  azureSubscriptionEndpoint: 'Reform-CFT-VH-Dev'
  azureContainerRegistry: 'vhinfrastructure.azurecr.io'
  helmVersion: '2.12.3'


# GitHub Repo that conatins build templates. Reference https://docs.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=vsts#using-other-repositories
resources:
  repositories:
  - repository: azureDevOpsTemplates
    type: github
    name: hmcts/azure-devops-templates
    ref: refs/heads/master # ref name to use, defaults to 'refs/heads/master'
    endpoint: 'GitHubDevOps'

stages:
- stage: Build
  jobs:
  - template: jobs/angularDotNetCore.yml@azureDevOpsTemplates # Template reference
    parameters:
        sonarCloudExtraProperties: $(sonarCloudExtraProperties)
        integrationTestsAppSettingsTransform: $(integrationTestsAppSettingsTransform)
        coverletCoverageExclusions: $(coverletCoverageExclusions)
        apiDirectory: $(apiDirectory)
        dalWorkingDirectory: $(dalWorkingDirectory)
        keyVaultName: $(keyVaultName)
        secretsFilter: $(secretsFilter)

- stage: BuildImage
  jobs:
  - job: buildImage
    steps:

    - task: DownloadSecureFile@1
      inputs:
        secureFile: 'vh_kube_dev_helm.key.pem'

    - task: DownloadSecureFile@1
      inputs:
        secureFile: 'vh_kube_dev_helm.cert.pem'

    - task: DownloadSecureFile@1
      inputs:
        secureFile: 'vh_kube_dev_ca.cert.pem'

    - task: DownloadBuildArtifacts@0
      inputs:
        artifactName: 'WebApp'

    - task: Docker@2
      displayName: buildAndPush
      inputs:
        containerRegistry: '$(azureContainerRegistry)'
        repository: $(Build.Repository.Name)
        Dockerfile: Dockerfile
        tags: |
          $(Build.BuildId)
          lates

    - task: HelmInstaller@0
      displayName: 'Install Helm $(helmVersion)'
      inputs: 
        helmVersion: $(helmVersion)
        checkLatestHelmVersion: false

    - task: HelmDeploy@0
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'a993ee82-40e5-4d87-a6f1-75f0a0458016'
        namespace: 'default'
        tillerNamespace: 'tiller'
        command: 'upgrade'
        chartName: 'vh-web-app'
        enableTls: true
        caCert: 'vh_kube_dev_ca.cert.pem'
        certificate: 'vh_kube_dev_helm.cert.pem'
        privatekey: 'vh_kube_dev_helm.key.pem'
        waitForExecution: false
        releaseName: 'vh-web-app'